% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rogue.plot.R
\name{phylogramm.plot.twocoloured}
\alias{phylogramm.plot.twocoloured}
\title{Draw a Two-Coloured Phylogram}
\usage{
phylogramm.plot.twocoloured(tree, edge.color = "black",
  vertical.edge.color = "grey50", edge.lwd = 2,
  vertical.edge.lwd = 2, use.edge.length = TRUE,
  show.tip.label = TRUE, show.node.label = FALSE,
  tip.color = "black", edge.lty = 1, font = 3, cex = par("cex"),
  adj = NULL, srt = 0, no.margin = FALSE, root.edge = FALSE,
  label.offset = 0, underscore = FALSE, direction = "rightwards",
  plot = TRUE, node.depth = 1, align.tip.label = FALSE,
  x.lim = NULL, y.lim = NULL, ...)
}
\arguments{
\item{tree}{an object of class \code{phylo} to be plotted.}

\item{edge.color}{a vector of mode character giving the colours used to draw
the HORIZONTAL edges of the phylogram. These are taken to be in the same
order as the \code{edge} component of the \code{phylo} object. If fewer
colours are given than the length of \code{edge}, then they are recycled.
Defaults to 'black'.}

\item{vertical.edge.color}{same for the VERTICAL edges in the phylogram. If
fewer colours are given than the number of internal nodes, then they are
recycled. Defaults to 'grey50'.}

\item{edge.lwd}{a numeric vector giving the line widths of the edges of the
plotted phylogeny. These are taken to be in the same order as the
component \code{edge} of the \code{tree}. If fewer values are given than
the length of \code{edge}, then these are recycled.}

\item{vertical.edge.lwd}{same as previous argument, but for the VERTICAL
edges. If fewer values are given than the number of internal nodes, then
these are recycled.}

\item{use.edge.length}{a logical indicating whether to use the edge lengths
of the phylogeny to draw the branches (the default) or not (if FALSE).
This option has no effect if the object of class 'phylo' has no
\code{edge.length} element.}

\item{show.tip.label}{a logical indicating whether to show the tip labels
on the phylogeny (defaults to TRUE, i.e. the labels are shown).}

\item{show.node.label}{a logical indicating whether to show the node labels
on the phylogeny (defaults to FALSE, i.e. the labels are not shown).}

\item{tip.color}{the colours used for the tip labels, recycled if needed.}

\item{edge.lty}{a numeric vector giving the line type of the edges of the
plotted phylogeny. Options are 1: plain, 2: dashed, 3: dotted, 4: dotdash,
5: longdash, 6: twodash.}

\item{font}{an integer specifying the type of font for the labels: 1: plain
text, 2: bold, 3: italic (the default), 4: bold italic.}

\item{cex}{a numeric value giving the scaling factor of the tip and node
labels (Character EXpansion). The default is to take the current value
from the graphical parameters.}

\item{adj}{a numeric specifying the justification of the text strings of the
labels: 0: left-justification, 0.5: centering, or 1: right-justification.
If NULL (the default), the value is set with respect to the orientation of
the phylogram (see details).}

\item{srt}{a numeric giving how much the labels are rotated in degrees
(negative values are allowed resulting in clock-like rotation); the value
has an effect respectively to the value of direction.}

\item{no.margin}{a logical. If TRUE, the margins are set to zero and the
plot uses all the space of the device.}

\item{root.edge}{a logical indicating whether to draw the root edge
(defaults to FALSE); this has no effect if \code{use.edge.length = FALSE}.}

\item{label.offset}{a numeric giving the space between the nodes and the
tips of the phylogeny and their corresponding labels.}

\item{underscore}{a logical specifying whether the underscores in tip labels
should be written as spaces (the default) or left as they are (if TRUE).}

\item{direction}{a character string specifying the direction of the tree.
Four values are possible: "rightwards" (the default),
"leftwards", "upwards", and "downwards".}

\item{plot}{a logical controlling whether to draw the tree. If FALSE, the
graphical device is set as if the tree was plotted, and the coordinates
are saved as well.}

\item{node.depth}{an integer value (1 or 2) used if edge lengths are not
used to plot the tree; 1: the node depths are proportional to the number
of tips descending from each node (the default), 2: they are evenly
spaced.}

\item{align.tip.label}{a logical value or an integer. If TRUE, the tips are
aligned and dotted lines are drawn between the tips of the tree and the
labels. If an integer, the tips are aligned and this gives the type of the
lines (lty).}

\item{x.lim}{a numeric vector of length one or two giving the limit(s) of
the x-axis. If NULL, this is computed with respect to various parameters
such as the string lengths of the labels and the branch lengths. If a
single value is given, this is taken as the upper limit. Defaults to
\code{NULL}.}

\item{y.lim}{same as above, but for the y-axis.}

\item{...}{further arguments passed to \code{\link[ape]{plot.phylo}}.}
}
\value{
\code{phylogramm.plot.twocoloured} returns invisibly a list with
   components whose values are those used for the current plot (see the
   help of \code{plot.phylo} for details).
}
\description{
Draw a phylogram with horizontal and vertical branches formated separately,
  for instance to create a rogue plot as introduced in Klopfstein &
  Spasojevic (2018).
}
\details{
This function plots a tree in 'rectangular phylogram' format, allowing to
  pass colour and line typevectors for the horizontal and vertical edges
  separately. The colour vector for horizontal edges is passed in the same
  order as the edges ('edge.color'), and the vector for the vertical edges
  in the same order as the internal node indices.

Typically, one would first run \code{\link{get.rogue.placement}} on a tree
  and corresponding reference trees, then obtain edge formatting vectors
  from \code{\link{get.edge.formats}}, and finally pass those to the current
  function to generate the plot. Instead the wrapper function
  \code{\link{create.rogue.plot}} can be used.

This function is based on the \code{\link[ape]{plot.phylo}} function in
  the \code{ape} package version 5.1 by E. Paradis.
}
\examples{
## general examples
tree <- ape::rtree(12, rooted = TRUE)
cols.horiz <- rep("black", length(tree$edge.length))
cols.verti <- rainbow(tree$Nnode)
phylogramm.plot.twocoloured(tree, edge.color = cols.horiz,
  vertical.edge.color = cols.verti)
cols.horiz <- rainbow(length(tree$edge.length))
cols.verti <- paste("grey", seq(from = 95, to = 20,
  by = -floor(75 / tree$Nnode)), sep = "")
phylogramm.plot.twocoloured(tree, edge.color = cols.horiz,
  vertical.edge.color = cols.verti)

## example of a Rogue Plot
reftrees <- ape::rmtree(5, 21, tip.label = c("rogue.taxon", paste("t",
  1:20, sep = "")))
reftrees <- c(rep(list(reftrees[[1]]), 60), rep(list(reftrees[[2]]),
  25), rep(list(reftrees[[3]]), 10), reftrees)
tree <- reftrees[[1]]
placements <- get.rogue.placement(tree, reftrees, rogues =
  "rogue.taxon", outgroup = "t1")
tree <- ape::drop.tip(tree, tip = "rogue.taxon")
edge.formats <- get.edge.formats(tree, placements, zero.col = "black",
  col = paste("grey", seq(from = 95, to = 20, by = -8), sep = ""),
  zero.lwd = 1, lwd = 3, min.prob = 0.01)
ff <- edge.formats[[1]]
phylogramm.plot.twocoloured(tree, edge.color = ff$cols.horizontal,
  vertical.edge.color = ff$cols.vertical, edge.lwd = ff$lwd.horizontal,
  vertical.edge.lwd = ff$lwd.vertical, tip.color = "black", edge.width = 2,
  no.margin = TRUE, cex = 0.8)

}
\references{
Klopfstein, S., Spasojevic, T. (2018). Illustrating phylogenetic placement
of fossils using RoguePlots: An example from ichneumonid parasitoid wasps
(Hymenoptera, Ichneumonidae) and an extensive morphological matrix. bioRxiv
https://doi.org/10.1101/425090
}
